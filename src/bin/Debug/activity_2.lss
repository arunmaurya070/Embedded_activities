
bin\Debug\activity_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000080  00000000  00000000  0000044f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e6  00000000  00000000  000004cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000395  00000000  00000000  000005b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000235  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c2  00000000  00000000  00000b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00000f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015b  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  8e:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <activity_2>:
#include"../inc/activity_2.h"

uint16_t readADC(uint8_t ch);

int activity_2()
{
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	00 d0       	rcall	.+0      	; 0x9c <activity_2+0x6>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
    /*initializing ADC in controller */
    ADMUX = (1<<REFS0);
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 e4       	ldi	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24
    ADCSRA = (1<<ADEN) | (7<<ADPS0);
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 83       	st	Z, r24

    /*defining Port B pin 1 as output port*/
    DDRB |= (1<<PB1);
  b0:	a4 e2       	ldi	r26, 0x24	; 36
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e4 e2       	ldi	r30, 0x24	; 36
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	8c 93       	st	X, r24

    /*variable to catch ADC value*/

    int value = readADC(0);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 80 00 	call	0x100	; 0x100 <readADC>
  c4:	9a 83       	std	Y+2, r25	; 0x02
  c6:	89 83       	std	Y+1, r24	; 0x01
    /*turn on LED when calue is greater than specidfied limits*/
    if(value > 512)
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	22 e0       	ldi	r18, 0x02	; 2
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	92 07       	cpc	r25, r18
  d2:	44 f0       	brlt	.+16     	; 0xe4 <activity_2+0x4e>
    {
        PORTB |= (1<<PB1);
  d4:	a5 e2       	ldi	r26, 0x25	; 37
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	e5 e2       	ldi	r30, 0x25	; 37
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	8c 93       	st	X, r24
  e2:	07 c0       	rjmp	.+14     	; 0xf2 <activity_2+0x5c>
    }
    else
    {
        PORTB &= ~(1<<PB1);
  e4:	a5 e2       	ldi	r26, 0x25	; 37
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e5 e2       	ldi	r30, 0x25	; 37
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	8c 93       	st	X, r24
    }
    return value;
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
}
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	cf 91       	pop	r28
  fc:	df 91       	pop	r29
  fe:	08 95       	ret

00000100 <readADC>:

uint16_t readADC(uint8_t ch)
{
 100:	df 93       	push	r29
 102:	cf 93       	push	r28
 104:	0f 92       	push	r0
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	89 83       	std	Y+1, r24	; 0x01
    //clearing ADC mux register.
    ADMUX &= 0xf8;
 10c:	ac e7       	ldi	r26, 0x7C	; 124
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	ec e7       	ldi	r30, 0x7C	; 124
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 7f       	andi	r24, 0xF8	; 248
 118:	8c 93       	st	X, r24
    //decoding the channel number for conversion.
    ch &= 0b00000111;
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	87 70       	andi	r24, 0x07	; 7
 11e:	89 83       	std	Y+1, r24	; 0x01
    ADMUX |= ch;
 120:	ac e7       	ldi	r26, 0x7C	; 124
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	90 81       	ld	r25, Z
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	89 2b       	or	r24, r25
 12e:	8c 93       	st	X, r24
    /*Start single conversion*/
    ADCSRA |= (1<<ADSC);
 130:	aa e7       	ldi	r26, 0x7A	; 122
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	ea e7       	ldi	r30, 0x7A	; 122
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	8c 93       	st	X, r24
    //wait for conversion to end.
    while(!(ADCSRA&(1<<ADIF)));
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 2f       	mov	r24, r24
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	80 71       	andi	r24, 0x10	; 16
 14a:	90 70       	andi	r25, 0x00	; 0
 14c:	00 97       	sbiw	r24, 0x00	; 0
 14e:	b9 f3       	breq	.-18     	; 0x13e <readADC+0x3e>
    //clear ADIF by writing 1 to it/
    ADCSRA |= (1<<ADIF);
 150:	aa e7       	ldi	r26, 0x7A	; 122
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 61       	ori	r24, 0x10	; 16
 15c:	8c 93       	st	X, r24
    return(ADC);
 15e:	e8 e7       	ldi	r30, 0x78	; 120
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	91 81       	ldd	r25, Z+1	; 0x01
}
 166:	0f 90       	pop	r0
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <activity_3>:
#include"../inc/activity_2.h"
#include"../inc/activity_3.h"
#include"../inc/activity_4.h"

void activity_3()
{
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	00 d0       	rcall	.+0      	; 0x174 <activity_3+0x6>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
    unsigned volatile int ADC_val;
    /*Initialize the Timer peripherals*/
    /*PD5 and PD6 are two channels for Timer0*/

    //led initialise
    DDRD |= (1<<PD6);
 178:	aa e2       	ldi	r26, 0x2A	; 42
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	ea e2       	ldi	r30, 0x2A	; 42
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 64       	ori	r24, 0x40	; 64
 184:	8c 93       	st	X, r24

    /*Timer0 control register A*/
    //non-inverting mode(COM0), Fast PWM(WGM)
    TCCR0A |= (1<<COM0A1) | (1<<WGM01) |(1<<WGM00);
 186:	a4 e4       	ldi	r26, 0x44	; 68
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e4 e4       	ldi	r30, 0x44	; 68
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	83 68       	ori	r24, 0x83	; 131
 192:	8c 93       	st	X, r24

    /*Timer0 control register B*/
    //prescalar: 64, Fclk = 16 MHZ.
    TCCR0B |= (1<<CS01) | (1<<CS00);
 194:	a5 e4       	ldi	r26, 0x45	; 69
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	e5 e4       	ldi	r30, 0x45	; 69
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	83 60       	ori	r24, 0x03	; 3
 1a0:	8c 93       	st	X, r24

    TCNT0 = 0;
 1a2:	e6 e4       	ldi	r30, 0x46	; 70
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	10 82       	st	Z, r1
    while (1)
    {

        ADC_val = activity_2();
 1a8:	0e 94 4b 00 	call	0x96	; 0x96 <activity_2>
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	89 83       	std	Y+1, r24	; 0x01
        if(ADC_val > 0 && ADC_val <= 200)
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	9a 81       	ldd	r25, Y+2	; 0x02
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	71 f0       	breq	.+28     	; 0x1d4 <activity_3+0x66>
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	9a 81       	ldd	r25, Y+2	; 0x02
 1bc:	89 3c       	cpi	r24, 0xC9	; 201
 1be:	91 05       	cpc	r25, r1
 1c0:	48 f4       	brcc	.+18     	; 0x1d4 <activity_3+0x66>
        {
            OCR0A = 51;
 1c2:	e7 e4       	ldi	r30, 0x47	; 71
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	83 e3       	ldi	r24, 0x33	; 51
 1c8:	80 83       	st	Z, r24
            activity_4("Fifty One\n");
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 97 01 	call	0x32e	; 0x32e <activity_4>
 1d2:	ea cf       	rjmp	.-44     	; 0x1a8 <activity_3+0x3a>
        }
        else if(ADC_val > 210 && ADC_val <= 500)
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	9a 81       	ldd	r25, Y+2	; 0x02
 1d8:	83 3d       	cpi	r24, 0xD3	; 211
 1da:	91 05       	cpc	r25, r1
 1dc:	78 f0       	brcs	.+30     	; 0x1fc <activity_3+0x8e>
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	9a 81       	ldd	r25, Y+2	; 0x02
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	85 3f       	cpi	r24, 0xF5	; 245
 1e6:	92 07       	cpc	r25, r18
 1e8:	48 f4       	brcc	.+18     	; 0x1fc <activity_3+0x8e>
        {
            OCR0A = 102;
 1ea:	e7 e4       	ldi	r30, 0x47	; 71
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	86 e6       	ldi	r24, 0x66	; 102
 1f0:	80 83       	st	Z, r24
            activity_4("One Hundred Two\n");
 1f2:	8b e0       	ldi	r24, 0x0B	; 11
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 97 01 	call	0x32e	; 0x32e <activity_4>
 1fa:	d6 cf       	rjmp	.-84     	; 0x1a8 <activity_3+0x3a>
        }
        else if(ADC_val > 510 && ADC_val <= 700)
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	8f 3f       	cpi	r24, 0xFF	; 255
 204:	92 07       	cpc	r25, r18
 206:	78 f0       	brcs	.+30     	; 0x226 <activity_3+0xb8>
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	22 e0       	ldi	r18, 0x02	; 2
 20e:	8d 3b       	cpi	r24, 0xBD	; 189
 210:	92 07       	cpc	r25, r18
 212:	48 f4       	brcc	.+18     	; 0x226 <activity_3+0xb8>
        {
            OCR0A = 180;
 214:	e7 e4       	ldi	r30, 0x47	; 71
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	84 eb       	ldi	r24, 0xB4	; 180
 21a:	80 83       	st	Z, r24
            activity_4("One Hundred Eighty\n");
 21c:	8c e1       	ldi	r24, 0x1C	; 28
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 97 01 	call	0x32e	; 0x32e <activity_4>
 224:	c1 cf       	rjmp	.-126    	; 0x1a8 <activity_3+0x3a>
        }
        else if(ADC_val > 710 && ADC_val <= 1024)
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	22 e0       	ldi	r18, 0x02	; 2
 22c:	87 3c       	cpi	r24, 0xC7	; 199
 22e:	92 07       	cpc	r25, r18
 230:	08 f4       	brcc	.+2      	; 0x234 <activity_3+0xc6>
 232:	ba cf       	rjmp	.-140    	; 0x1a8 <activity_3+0x3a>
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	9a 81       	ldd	r25, Y+2	; 0x02
 238:	24 e0       	ldi	r18, 0x04	; 4
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	92 07       	cpc	r25, r18
 23e:	08 f0       	brcs	.+2      	; 0x242 <activity_3+0xd4>
 240:	b3 cf       	rjmp	.-154    	; 0x1a8 <activity_3+0x3a>
        {
            OCR0A = 250;
 242:	e7 e4       	ldi	r30, 0x47	; 71
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	8a ef       	ldi	r24, 0xFA	; 250
 248:	80 83       	st	Z, r24
            activity_4("Two Hundred Fifty\n");
 24a:	80 e3       	ldi	r24, 0x30	; 48
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 97 01 	call	0x32e	; 0x32e <activity_4>
 252:	aa cf       	rjmp	.-172    	; 0x1a8 <activity_3+0x3a>

00000254 <USART_init>:
#define BAUD 9600
#define F_CPU 16000000
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)

void USART_init()
{
 254:	df 93       	push	r29
 256:	cf 93       	push	r28
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
    /*PD0 RXD PD1 TXD*/

    /*sET BAUD RATE TO REGISTER*/
    UBRR0H = (BAUDRATE>>8);
 25c:	e5 ec       	ldi	r30, 0xC5	; 197
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	10 82       	st	Z, r1
    UBRR0L = BAUDRATE;
 262:	e4 ec       	ldi	r30, 0xC4	; 196
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	87 e6       	ldi	r24, 0x67	; 103
 268:	80 83       	st	Z, r24

    /*SETTING SYNCHRONOUS COMMUNICATION OF 8 BIT TRANSCIEVER*/
    UCSR0C = (1<<UMSEL00) | (1<<UCSZ01) | (1<<UCSZ00);
 26a:	e2 ec       	ldi	r30, 0xC2	; 194
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	86 e4       	ldi	r24, 0x46	; 70
 270:	80 83       	st	Z, r24

    /*ENABLE THE RECIEVER AND TRANSIMTTER*/
    UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
 272:	e1 ec       	ldi	r30, 0xC1	; 193
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	88 ed       	ldi	r24, 0xD8	; 216
 278:	80 83       	st	Z, r24
}
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	08 95       	ret

00000280 <USART_read>:

char USART_read()
{
 280:	df 93       	push	r29
 282:	cf 93       	push	r28
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
    while( !(UCSR0A & (1<<RXC0)) );
 288:	e0 ec       	ldi	r30, 0xC0	; 192
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	88 23       	and	r24, r24
 290:	dc f7       	brge	.-10     	; 0x288 <USART_read+0x8>
    return UDR0;
 292:	e6 ec       	ldi	r30, 0xC6	; 198
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
}
 298:	cf 91       	pop	r28
 29a:	df 91       	pop	r29
 29c:	08 95       	ret

0000029e <USART_write>:


void USART_write(char data)
{
 29e:	df 93       	push	r29
 2a0:	cf 93       	push	r28
 2a2:	0f 92       	push	r0
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	89 83       	std	Y+1, r24	; 0x01
    while( !(UCSR0A & (1<<UDRE0)) );
 2aa:	e0 ec       	ldi	r30, 0xC0	; 192
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	88 2f       	mov	r24, r24
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	80 72       	andi	r24, 0x20	; 32
 2b6:	90 70       	andi	r25, 0x00	; 0
 2b8:	00 97       	sbiw	r24, 0x00	; 0
 2ba:	b9 f3       	breq	.-18     	; 0x2aa <USART_write+0xc>
    UDR0 = data;
 2bc:	e6 ec       	ldi	r30, 0xC6	; 198
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	80 83       	st	Z, r24
}
 2c4:	0f 90       	pop	r0
 2c6:	cf 91       	pop	r28
 2c8:	df 91       	pop	r29
 2ca:	08 95       	ret

000002cc <write_string>:

void write_string(char *string)
{
 2cc:	df 93       	push	r29
 2ce:	cf 93       	push	r28
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <write_string+0x6>
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <write_string+0x8>
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <write_string+0xa>
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	9e 83       	std	Y+6, r25	; 0x06
 2dc:	8d 83       	std	Y+5, r24	; 0x05
    int count;
    int len_string = strlen(string);
 2de:	8d 81       	ldd	r24, Y+5	; 0x05
 2e0:	9e 81       	ldd	r25, Y+6	; 0x06
 2e2:	0e 94 ae 01 	call	0x35c	; 0x35c <strlen>
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	89 83       	std	Y+1, r24	; 0x01
    for(count = 0 ; count < len_string; count++)
 2ea:	1c 82       	std	Y+4, r1	; 0x04
 2ec:	1b 82       	std	Y+3, r1	; 0x03
 2ee:	0f c0       	rjmp	.+30     	; 0x30e <write_string+0x42>
    {
        USART_write(*(string+count));
 2f0:	2b 81       	ldd	r18, Y+3	; 0x03
 2f2:	3c 81       	ldd	r19, Y+4	; 0x04
 2f4:	8d 81       	ldd	r24, Y+5	; 0x05
 2f6:	9e 81       	ldd	r25, Y+6	; 0x06
 2f8:	fc 01       	movw	r30, r24
 2fa:	e2 0f       	add	r30, r18
 2fc:	f3 1f       	adc	r31, r19
 2fe:	80 81       	ld	r24, Z
 300:	0e 94 4f 01 	call	0x29e	; 0x29e <USART_write>

void write_string(char *string)
{
    int count;
    int len_string = strlen(string);
    for(count = 0 ; count < len_string; count++)
 304:	8b 81       	ldd	r24, Y+3	; 0x03
 306:	9c 81       	ldd	r25, Y+4	; 0x04
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	9c 83       	std	Y+4, r25	; 0x04
 30c:	8b 83       	std	Y+3, r24	; 0x03
 30e:	2b 81       	ldd	r18, Y+3	; 0x03
 310:	3c 81       	ldd	r19, Y+4	; 0x04
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	9a 81       	ldd	r25, Y+2	; 0x02
 316:	28 17       	cp	r18, r24
 318:	39 07       	cpc	r19, r25
 31a:	54 f3       	brlt	.-44     	; 0x2f0 <write_string+0x24>
    {
        USART_write(*(string+count));
    }
}
 31c:	26 96       	adiw	r28, 0x06	; 6
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	cf 91       	pop	r28
 32a:	df 91       	pop	r29
 32c:	08 95       	ret

0000032e <activity_4>:


void activity_4(char *data)
{
 32e:	df 93       	push	r29
 330:	cf 93       	push	r28
 332:	00 d0       	rcall	.+0      	; 0x334 <activity_4+0x6>
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	9a 83       	std	Y+2, r25	; 0x02
 33a:	89 83       	std	Y+1, r24	; 0x01

    USART_init();
 33c:	0e 94 2a 01 	call	0x254	; 0x254 <USART_init>
    write_string(data);
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	9a 81       	ldd	r25, Y+2	; 0x02
 344:	0e 94 66 01 	call	0x2cc	; 0x2cc <write_string>
}
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	cf 91       	pop	r28
 34e:	df 91       	pop	r29
 350:	08 95       	ret

00000352 <main>:
 */

#include <avr/io.h>

int main(void)
{
 352:	df 93       	push	r29
 354:	cf 93       	push	r28
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	ff cf       	rjmp	.-2      	; 0x35a <main+0x8>

0000035c <strlen>:
 35c:	e8 2f       	mov	r30, r24
 35e:	f9 2f       	mov	r31, r25
 360:	01 90       	ld	r0, Z+
 362:	00 20       	and	r0, r0
 364:	e9 f7       	brne	.-6      	; 0x360 <strlen+0x4>
 366:	80 95       	com	r24
 368:	90 95       	com	r25
 36a:	8e 0f       	add	r24, r30
 36c:	9f 1f       	adc	r25, r31
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
